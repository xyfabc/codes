#include <linux/jiffies.h>

#include <asm/jzsoc.h>


#define VIDIOC_S_EXPOSURE 			300
#define VIDIOC_S_BRIGHT				301
#define VIDIOC_S_CONTRAS			302
#define VIDIOC_S_CONTRAS_CENTER	    303
#define VIDIOC_RESET_SENOSER		304

/*ZYL,2011.11.08*/
#define VIDIOC_READ_ALLSENOSER		305
#define VIDIOC_INIT_ALLSENOSER		306
#define VIDIOC_G_EXPOSURE		307


#define I2C_READ	1
#define I2C_WRITE	0

//#define TIMEOUT         1000

#define golf_cim_clear_state(n) \
	do{\
		REG_CIM_STATE(n) = 0x0;\
	}while(0)
#define golf_cim_reset_rxfifo(n)\
	do{\
		REG_CIM_CTRL(n) |= CIM_CTRL_DMA_EN;\
		REG_CIM_CTRL(n) |= CIM_CTRL_RXF_RST;\
		REG_CIM_CTRL(n) &= ~CIM_CTRL_DMA_EN;\
	}while(0)

#define golf_cim_unreset_rxfifo(n)\
	do{\
		REG_CIM_CTRL(n) |= CIM_CTRL_DMA_EN;\
		REG_CIM_CTRL(n) &= ~CIM_CTRL_RXF_RST;\
		REG_CIM_CTRL(n) &= ~CIM_CTRL_DMA_EN;\
	}while(0)
	
#define golf_cim_enable_dma(n)\
	do{\
		REG_CIM_CTRL(n) |= CIM_CTRL_DMA_EN;\
		REG_CIM_CTRL(n) &= ~CIM_CTRL_RXF_RST;\
		REG_CIM_CTRL(n) |= CIM_CTRL_DMA_EN;\
	}while(0)

//#define PIN_CIM_GPF5	GPE(9)	// (32 * 5 + 5)	-> GPE(9) YJT, 20120602
#define PIN_CIM_GPF5	GPA(6)  //by dy  	// modify, yjt, 20130828, PB18 -> PA27 -> PA6
//#define PIN_CIM_GPF5	GPE(20)  //test by dy PE20

#define PIN_CIM_I2C_SEL	GPB(1)	// add, yjt, 20130725, PG8 -> PB1
#define PIN_CIM_RESET	GPA(2)

#define golf_pin_cim_rgb()\
do{\
	__gpio_as_output1(PIN_CIM_GPF5);  /* near relay */ \
}while(0)

#define golf_pin_cim_yuv()\
do{\
	__gpio_as_output0(PIN_CIM_GPF5);  /* far to relay */ \
}while(0)


#define CIM_SELECT_CTR_GPIO_INIT()\
do{\
	__gpio_as_output(PIN_CIM_GPF5);\
__gpio_enable_pull(PIN_CIM_GPF5);\
	__gpio_clear_pin(PIN_CIM_GPF5);  \
	__gpio_as_output0(PIN_CIM_I2C_SEL);	/* add, yjt, 20130725 */ 	\
}while(0)

#define i2c_pin_cim_rgb()	\
do{	\
	__gpio_as_output1(PIN_CIM_I2C_SEL);	\
}while(0)

#define i2c_pin_cim_yuv()	\
do{	\
	__gpio_as_output0(PIN_CIM_I2C_SEL);	\
}while(0)

#define reset_pin_cim_reset_on()	\
do{	\
	__gpio_as_output0(PIN_CIM_RESET);	\
}while(0)

#define reset_pin_cim_reset_off()	\
do{	\
	__gpio_as_output1(PIN_CIM_RESET);	\
}while(0)


/*
 *	ioctl commands
 */
#define IOCTL_SET_ADDR            0 /* set i2c address */
#define IOCTL_SET_CLK             1 /* set i2c clock */
#define IOCTL_WRITE_REG           2 /* write sensor register */
#define IOCTL_READ_REG            3 /* read sensor register */
#define IOCTL_SET_SEL             4 /* set sensor select */
/*
 *	i2c related
 */
//static unsigned int i2c_addr = 0x42;
//static unsigned int i2c_clk = 100*1024;

//static struct video_device *jz_sensor;


#ifdef i2c_read_reg
#endif

struct i2c_regvals {
  unsigned char reg;
  unsigned char val;
};

#if 1 //7740
static struct i2c_regvals v7725YUVreg[] =// 500 10 58   old   540 10 48    230 1000  40  40
{

0x12, 0x80,
0x13, 0x00,
              
0x11, 0x03, //00/01/03/07 for 60/30/15/7.5fps
0x12, 0x00,
0xd5, 0x10,
//0x0c, 0x12,
0x0c, 0xD2,//mirror and flip on
0x0d, 0x34,
0x16, 0x01,//in mirror mode,0x16+1
0x17, 0x25,
0x18, 0xa0,
0x19, 0x03,
0x1a, 0xf0,
0x1b, 0x89,
0x1e, 0x13,
0x22, 0x03,
0x29, 0x17,
0x2b, 0xf8,
0x2c, 0x01,
0x31, 0xa0,
0x32, 0xf0,
0x33, 0Xc4, //0xc4,
              
0x3a, 0xb4, //<= 30fps
0x36, 0x3f, //0x3f,
              
0x04, 0x60,
0x27, 0x80,
0x3d, 0x0f, //08/0f/0f/0f for 60/30/15/7.5fps
0x3e, 0x82,
0x3f, 0x40,
0x40, 0x7f,
0x41, 0x6a,
0x42, 0x29,
0x44, 0xe5, //f5/e5/e5/e5 for 60/30/15/7.5fps
0x45, 0x41,
0x47, 0x42,
0x48, 0x00,
0x49, 0x61,
0x4a, 0xa1,
0x4b, 0x46,
0x4c, 0x18,
0x4d, 0x50,
0x4e, 0x13,
0x64, 0x00,
0x67, 0x88,
0x68, 0x1a,
0x14, 0x08,
0x24, 0x25,   	//Luminance High Range , initial 0x3c
0x25, 0x10,	//Luminance Low Range , initial 0x30
0x26, 0x72,
//0x50, 0x4c, //2e/97/4c/26 for 60/30/15/7.5fps
0x50, 0x4b,
//0x51, 0x3f, //fc/7e/3f/20 for 60/30/15/7.5fps
0x51, 0x7e,
0x52, 0x00, //10/00/00/00 for 60/30/15/7.5fps
0x53, 0x00,
0x20, 0x00,
0x21, 0x57, //01/23/57/cf for 60/30/15/7.5fps
0x38, 0x14,
0xe9, 0x00,
0x56, 0x55,
0x57, 0xff,
0x58, 0xff,
0x59, 0xff,
0x5f, 0x04,
0x13, 0xf8,    //close AEC  AGC
0x80, 0x7d,
0x81, 0x3f, //0x3f,
0x82, 0x32,
0x83, 0x03, //0x03,
//add yjt
//0x38, 0x18,
//0x84, 0x00,
//0x38, 0x17,
//0x84, 0x02,
0x54, 0xfc,
0x38, 0x11,
0x84, 0x70,
0x85, 0x00,
0x86, 0x03,
0x87, 0x01,
0x88, 0x05,
0x89, 0x30,
0x8d, 0x30,
0x8f, 0x85,
0x93, 0x30,
0x95, 0x85,
0x99, 0x30,
0x9b, 0x85,
0x9c, 0x08,
0x9d, 0x12,
0x9e, 0x23,
0x9f, 0x45,
0xa0, 0x55,
0xa1, 0x64,
0xa2, 0x72,
0xa3, 0x7f,
0xa4, 0x8b,
0xa5, 0x95,
0xa6, 0xa7,
0xa7, 0xb5,
0xa8, 0xcb,
0xa9, 0xdd,
0xaa, 0xec,
0xab, 0x1a,
0xce, 0x78,
0xcf, 0x6e,
0xd0, 0x0a,
0xd1, 0x0c,
0xd2, 0x84,
0xd3, 0x90,
0xd4, 0x1e,
0x5a, 0x24,
0x5b, 0x1f,
0x5c, 0x88,
0x5d, 0x60,
0xac, 0x6e,
0xbe, 0xff,
0xbf, 0x00,
0x70, 0x00,
0x71, 0x34,
0x74, 0x28,
0x75, 0x98,
0x76, 0x00,
0x77, 0x08,
0x78, 0x01,
0x79, 0xc2,
0x7d, 0x02,
0x7a, 0x9c,
0x7b, 0x40,
0xec, 0x02, //02/82 for manual/auto
0x7c, 0x0c,
/*0x12, 0x01,
0x36, 0x2f,
0x83, 0x01,
0x31, 0xa0,
0x32, 0xf0,
0x82, 0x32,*/
//0x28, 0x00,
0x28, 0x00,
0x0e, 0xe3,

0x15, 0x00,
0x00, 0x00,

0x10, 0x2c,  //add by dy
0x0f, 0x01,  //add by dy
  
0xff, 0xff,

};	  

#if 0
//打开自动曝光
static struct i2c_regvals reg_init_yuv_test[] =
{0x12,0x80, 
0x12,0x00, 
0x00,0x00, 
0x3D,0x03, 
0x0c,0x10,
0x15,0x00, 
0x16,0x00, 
0x17,0x22, 
0x18,0xa4, 
0x19,0x07, 
0x1a,0xf0, 

0x1b,0x35,

0x32,0x00, 
0x3f,0x1f, 
0x29,0xa0, 
0x2c,0xf2, 
0x2a,0x00, 
0x11,0x03, 
0x42,0x7f, 
0x4d,0x09, 
0x63,0xe0,
0x64,0xff, 
0x55,0xf4, 
0x65,0x20, 
0x66,0x00,
0x67,0x44, 
0x13,0xff, 
0x0d,0x51, 
0x0f,0xc5, 
0x14,0x41,
0x22,0x52, 
0x23,0x07, 
0x24,0x40,
0x25,0x3c,
0x26,0x92, 
0x2b,0x00, 
0x6b,0xaa, 
0x13,0xFf,
0x90,0x00,
0x91,0x01, 
0x92,0x03, 
0x93,0x00, 
0x94,0x37, 
0x95,0x2d, 
0x96,0x09, 
0x97,0x17, 
0x98,0x29, 
0x99,0x40, 
0x9a,0x9e, 
0x9b,0x20,
0xab,0x06,

0x9e,0x81, 
0xa6,0x26, 
0x60,0x80,
0x61,0x80,
0xa7,0x80,
0xa8,0x80,

0x7e,0x04, 
0x7f,0x08, 
0x80,0x10, 
0x81,0x20, 
0x82,0x28, 
0x83,0x30, 
0x84,0x38, 
0x85,0x40, 
0x86,0x48, 
0x87,0x50, 
0x88,0x60, 
0x89,0x70, 
0x8a,0x90, 
0x8b,0xb0, 
0x8c,0xd0,
0x8d,0x40, 

0x0e,0x65, 
0x46,0x01, 
0x47,0x00, 
0x48,0x00, 
0x49,0x04, 
0x4a,0x08, 
0x4b,0x04, 
0x4c,0x06, 
0x22,0x4c, 
0x23,0x07, 
0x33,0x66,
0x34,0x00, 
0x9c,0x20, 
0x08,0x00,
0x10,0xF0
	};	  


static struct i2c_regvals v7670reg_320x240[] =   //
{ 0x12,0x80, 
0x3d, 0x03,
0x12, 0x06,
0x17, 0x22,
0x18, 0xa4,
0x19, 0x07,
0x1a, 0xf0,
0x32, 0x00,
0x29, 0x50,
0x2c, 0x78,
0x2a, 0x00,
0x11, 0x03,// ;00/01/03/07 for 60/30/15/7.5fps
//
0x42, 0x7f,
0x4d, 0x09,
0x63, 0xe0,
0x64, 0xff,
0x65, 0x2f,
0x66, 0x00,
0x67, 0x48,
//
0x13, 0xf0,
0x0d, 0x41, //;51/61/71 for different AEC/AGC window
0x0f, 0xc5,
0x14, 0x11,
0x22, 0x3f,// ;ff/7f/3f/1f for 60/30/15/7.5fps
0x23, 0x07,// ;01/03/07/0f for 60/30/15/7.5fps
0x24, 0x40,
0x25, 0x30,
0x26, 0xa1,
0x2b, 0x00,// ;00/9e for 60/50Hz
0x6b, 0xaa,
0x13, 0xff,
//,
0x90, 0x05,
0x91, 0x01,
0x92, 0x03,
0x93, 0x00,
0x94, 0xb0,
0x95, 0x9d,
0x96, 0x13,
0x97, 0x16,
0x98, 0x7b,
0x99, 0x91,
0x9a, 0x1e,
0x9b, 0x08,
0x9c, 0x20,
0x9e, 0x81,
0xa6, 0x04,
//
0x7e, 0x0c,
0x7f, 0x16,
0x80, 0x2a,
0x81, 0x4e,
0x82, 0x61,
0x83, 0x6f,
0x84, 0x7b,
0x85, 0x86,
0x86, 0x8e,
0x87, 0x97,
0x88, 0xa4,
0x89, 0xaf,
0x8a, 0xc5,
0x8b, 0xd7,
0x8c, 0xe8,
0x8d, 0x20,
};

#endif

// new move to here
static struct i2c_regvals v7725reg[] = //_640x480
{
0x12, 0x80,
0x13, 0x00,
              
0x11, 0x03, //00/01/03/07 for 60/30/15/7.5fps
//0x12, 0x00,
0x12, 0x00,  //0x12, 0x01,  //for raw RGB by dy 20130320
0xd5, 0x10,
//0x0c, 0x12,
0x0c, 0xD2,//mirror and flip on
0x0d, 0x34,
0x16, 0x01,//in mirror mode,0x16+1
0x17, 0x25,
0x18, 0xa0,
0x19, 0x03,
0x1a, 0xf0,
0x1b, 0x89,
0x1e, 0x13,
0x22, 0x03,
0x29, 0x17,
0x2b, 0xf8,
0x2c, 0x01,
0x31, 0xa0,
0x32, 0xf0,
0x33, 0Xc4, //0xc4,
              
0x3a, 0xb4, //<= 30fps
0x36, 0x3f, //0x3f,
              
0x04, 0x60,
0x27, 0x80,
0x3d, 0x0f, //08/0f/0f/0f for 60/30/15/7.5fps
0x3e, 0x82,
0x3f, 0x40,
0x40, 0x7f,
0x41, 0x6a,
0x42, 0x29,
0x44, 0xe5, //f5/e5/e5/e5 for 60/30/15/7.5fps
0x45, 0x41,
0x47, 0x42,
0x48, 0x00,
0x49, 0x61,
0x4a, 0xa1,
0x4b, 0x46,
0x4c, 0x18,
0x4d, 0x50,
0x4e, 0x13,
0x64, 0x00,
0x67, 0x88,
0x68, 0x1a,
0x14, 0x08,
0x24, 0x3c,//0x24, 0x25,   	//Luminance High Range , initial 0x3c
0x25, 0x30,//0x25, 0x10,	//Luminance Low Range , initial 0x30
0x26, 0x72,
//0x50, 0x4c, //2e/97/4c/26 for 60/30/15/7.5fps
0x50, 0x72,//0x4b,
//0x51, 0x3f, //fc/7e/3f/20 for 60/30/15/7.5fps
0x51, 0x72,//0x7e,
0x52, 0x00, //10/00/00/00 for 60/30/15/7.5fps
0x53, 0x00,
0x20, 0x00,
0x21, 0x33,//0x57, //01/23/57/cf for 60/30/15/7.5fps
0x38, 0x14,
0xe9, 0x00,
0x56, 0x55,
0x57, 0xff,
0x58, 0xff,
0x59, 0xff,
0x5f, 0x04,
0x13, 0xff,//open AEC AGC  //0x13, 0xfa,  //close AEC  AGC
0x80, 0x7d,
0x81, 0x3f, //0x3f,
0x82, 0x32,
0x83, 0x03, //0x03,
//add yjt
//0x38, 0x18,
//0x84, 0x00,
//0x38, 0x17,
//0x84, 0x02,
0x54, 0xfc,
0x38, 0x11,
0x84, 0x70,
0x85, 0x00,
0x86, 0x03,
0x87, 0x01,
0x88, 0x05,
0x89, 0x30,
0x8d, 0x30,
0x8f, 0x85,
0x93, 0x30,
0x95, 0x85,
0x99, 0x30,
0x9b, 0x85,
0x9c, 0x08,
0x9d, 0x12,
0x9e, 0x23,
0x9f, 0x45,
0xa0, 0x55,
0xa1, 0x64,
0xa2, 0x72,
0xa3, 0x7f,
0xa4, 0x8b,
0xa5, 0x95,
0xa6, 0xa7,
0xa7, 0xb5,
0xa8, 0xcb,
0xa9, 0xdd,
0xaa, 0xec,
0xab, 0x1a,
0xce, 0x78,
0xcf, 0x6e,
0xd0, 0x0a,
0xd1, 0x0c,
0xd2, 0x84,
0xd3, 0x90,
0xd4, 0x1e,
0x5a, 0x24,
0x5b, 0x1f,
0x5c, 0x88,
0x5d, 0x60,
0xac, 0x6e,
0xbe, 0xff,
0xbf, 0x00,
0x70, 0x00,
0x71, 0x34,
0x74, 0x28,
0x75, 0x98,
0x76, 0x00,
0x77, 0x08,
0x78, 0x01,
0x79, 0xc2,
0x7d, 0x02,
0x7a, 0x9c,
0x7b, 0x40,
0xec, 0x02, //02/82 for manual/auto
0x7c, 0x0c,
/*0x12, 0x01,
0x36, 0x2f,
0x83, 0x01,
0x31, 0xa0,
0x32, 0xf0,
0x82, 0x32,*/

0x10, 0x2c,  //add by dy
0x0f, 0x01,  //add by dy

//0x28, 0x00,
0x28, 0x00,
0x0e, 0xe3,

/*
0xDA, 0X02,
0xDD, 0X80,
0xDE, 0X80,
*/

0xDA, 0X06,
0xE1, 0x20,
0xE2, 0x20,
0xE3, 0x00,
0xE4, 0x00,
0xDD, 0X40,
0xDE, 0X40,
0xDB, 0x80,
0xDC, 0x00,


0xff, 0xff,

};

#if 0
static struct i2c_regvals v7670regold[] = //_640x480
{
0x12,0x80, 
0x12,0x06, 
0x00,0x00, 
0x3D,0x03, 
0x0c,0x10,
0x15,0x00, 
0x16,0x00, 
0x17,0x22, 
0x18,0xa4,  // h640
//0x18,0x5e,  // h320
0x19,0x07, 
0x1a,0xf0,  // v480
//0x1a,0x78/2,  // v240

0x1b,0x35,

0x32,0x00, 
0x3f,0x1f, 
0x29,0x50,//0x29,0x50, //0x29,0xa0, 
0x2c,0x78,//0x2c,0x78, //0x2c,0xf2, 
0x2a,0x00, //
0x11,0x03, //
0x42,0x7f, 
0x4d,0x09, 
0x63,0xe0,
0x64,0xff, 
0x55,0xf4, 
0x65,0x2f, 
0x66,0x00,
0x67,0x48, 
0x13,0xff, 
0x0d,0x51, //
0x0f,0xc5, 
0x14,0x11,
0x22,0x47, //0x22,0x59, //0x22,0x58, //0x22,0x4c, //0x22,0x52, 
0x23,0x08, //0x23,0x06, //0x23,0x07, 
0x24,0x48, 
0x25,0x3c,
0x26,0x92, 
0x2b,0x00, //
0x6b,0xaa, 
0x13,0xFf,
0x90,0x05,
0x91,0x01, 
0x92,0x03, 
0x93,0x00, 
0x94,0x37, 
0x95,0x2d, 
0x96,0x09, 
0x97,0x17, 
0x98,0x29, 
0x99,0x40, 
0x9a,0x9e, 
0x9b,0x50,  // bright golf 0218

0x9e,0x81, 
0xa6,0x04, 

0x7e,0x04, 
0x7f,0x08, 
0x80,0x10, 
0x81,0x20, 
0x82,0x28, 
0x83,0x30, 
0x84,0x38, 
0x85,0x40, 
0x86,0x48, 
0x87,0x50, 
0x88,0x60, 
0x89,0x70, 
0x8a,0x90, 
0x8b,0xb0, 
0x8c,0xd0,
0x8d,0x40, 

0x0e,0x65, 
0x46,0x01, 
0x47,0x00, 
0x48,0x00, 
0x49,0x04, 
0x4a,0x08, 
0x4b,0x04, 
0x4c,0x06, 
0x22,0x4c, 
0x23,0x07, 
0x33,0x86, //0x33,0x66, //0x33,0x73, //0x33,0x66, // golf
0x34,0x00, //
0x9c,0x30, 
0x08,0x01,  // expose
0x10,0x60,  // expose
	0xff,0xff
};


static struct i2c_regvals v7670reg1[] = //_640x480
{ 0x12,0x80, 
0x12,0x06, 
0x00,0x00, 
0x3D,0x03, 
0x0c,0x10,
0x15,0x00, 
0x16,0x00, 
0x17,0x22, 
0x18,0xa4, 
0x19,0x07, 
0x1a,0xf0, 

0x1b,0x35,

0x32,0x00, 
0x3f,0x1f, 
//0x29,0xa0, 
//0x2c,0xf2, 
0x29, 0x50,
0x2c, 0x78,
0x2a,0x00, 
0x11,0x03, 
0x42,0x7f, 
0x4d,0x09, 
0x63,0xe0,
0x64,0xff, 
0x55,0xf4, 
0x65, 0x2f, //dsp0x65,0x20, //0x65, 0x2f,
0x66,0x00,
0x67,0x48, 
0x13,0xff,// 0x13,0xf2,
0x0d,0x51, 
0x0f,0xc5, 
0x14,0x11,
/*0x22,0x52,*/
0x22,0x4C,
0x23,0x07, 
0x24,0x48, 
0x25,0x3c,
0x26,0x92, 
0x2b,0x00, 
0x6b,0xaa, 
0x13,0xFF,//0x13,0xF2,
0x90,0x05,
0x91,0x01, 
0x92,0x03, 
0x93,0x00, 
0x94,0x37, 
0x95,0x2d, 
0x96,0x09, 
0x97,0x17, 
0x98,0x29, 
0x99,0x40, 
0x9a,0x9e, 
0x9b,0x30,

0x9e,0x81, 
0xa6,0x04, 


0x7e,0x04, 
0x7f,0x08, 
0x80,0x10, 
0x81,0x20, 
0x82,0x28, 
0x83,0x30, 
0x84,0x38, 
0x85,0x40, 
0x86,0x48, 
0x87,0x50, 
0x88,0x60, 
0x89,0x70, 
0x8a,0x90, 
0x8b,0xb0, 
0x8c,0xd0,
0x8d,0x40, 

0x0e,0x65, 
0x46,0x01, 
0x47,0x00, 
0x48,0x00, 
0x49,0x04, 
0x4a,0x08, 
0x4b,0x04, 
0x4c,0x06, 
0x22,0x4c, 
0x23,0x07, 
0x33,0x66,
0x34,0x00, 
0x9c,0x30, 
0x08,0x01,
0x10,0x60,
	0xff,0xff
};	  
#endif

#endif

#if 0
static int  jz_sensor_init(struct i2c_client *client, int st_num)
{
	int i;
	int count;
	printk("read rgb reg!!!!!!!!!!!!!!!!!!!\n" );

	__gpio_as_output1(GPE(9));
	count = sizeof(v7725reg) / sizeof(struct i2c_regvals);
	unsigned char testi2c;
	unsigned char testi2c_old;

	for(i = st_num; i < count; i++)
	{

		do
			{

			}while(0);

	}

	__gpio_clear_pin(GPE(9));
	count =sizeof(v7725YUVreg) / sizeof(struct i2c_regvals);
	for(i = st_num; i < count; i++)
	{
		do
		{





		}while(0);

	}
	printk("Ingenic CMOS camera sensor driver registered\n");
	__gpio_set_pin(GPE(9));
	printk("read rgb reg end !!!!!!!!!!!!!!!!!!!\n" );


	return 0;
}
#endif



